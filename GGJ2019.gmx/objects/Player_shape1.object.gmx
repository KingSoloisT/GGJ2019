<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shape1</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variables
dir = 0;
boost = 0;
boosterPower = 3;
maxBoost = 200;
turnSpeed = 5;
slowSpeed = 0.4;
canPush = true;
isMoving = false;
moves = 0;
pulseX = 0;
pulseY = 0;
sound = 0;
sound2 = 0;
sound3 = 0;
sound4 = 0;
volume = 0;
volume2 = 0;
volume3 = 0;
volume4 = 0;
dist = 0;
dist2 = 0;
dist3 = 0;
dist4 = 0;
pitchDist = 0;
pitch = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(pulseX,pulseY,pulse);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_gain(sound4Left,volume,1);
audio_sound_gain(sound4Right,volume,1);
if (home4.x &lt; x-100)
{
    audio_play_sound(sound4Left,30,false);
}
else
{
    audio_play_sound(sound4Right,30,false);
}
instance_create(home4.x, home4.y, pulse);
pulseX = home4.x;
pulseY = home4.y
alarm[4] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_gain(sound3Left,volume3,1);
audio_sound_gain(sound3Right,volume3,1);
if (home3.x &lt; -100)
{
    audio_play_sound(sound3Left,30,false);
}
else
{
    audio_play_sound(sound3Right,30,false);
}
instance_create(home3.x, home3.y, pulse);
pulseX = home3.x;
pulseY = home3.y
alarm[4] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_gain(sound2Left,volume2,1);
audio_sound_gain(sound2Right,volume2,1);
if (home2.x &lt; x-100)
{
    audio_play_sound(sound2Left,30,false);
}
else
{
    audio_play_sound(sound2Right,30,false);
}
instance_create(home2.x, home2.y, pulse);
pulseX = home2.x;
pulseY = home2.y
alarm[4] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_gain(soundLeft,volume,1);
audio_sound_gain(soundRight,volume,1);
if (home.x &lt; x-100)
{
    audio_play_sound(soundLeft,30,false);
}
else
{
    audio_play_sound(soundRight,30,false);
}
instance_create(home.x, home.y, pulse);
pulseX = home.x;
pulseY = home.y
alarm[4] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound = fx_boong;
sound2 = fx_fwah;
sound3 = fx_byah;
sound4 = fx_boopboop;
soundLeft = fx_boong_left;
sound2Left = fx_fwah_left;
sound3Left = fx_byah_left;
sound4Left = fx_boopboop_left;
soundRight = fx_boong_right;
sound2Right = fx_fwah_right;
sound3Right = fx_byah_right;
sound4Right = fx_boopboop_right;

switch (shapeNum)
{
    case 1:
        sprite_index = spr_shape1;
        break;
    case 2:
        sprite_index = spr_shape2;
        break;
    case 3:
        sprite_index = spr_shape3;
        break;
    case 4:
        sprite_index = spr_shape4;
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Thrust Input
key_thrust_held = ((keyboard_check(ord("W"))) || (keyboard_check(vk_up)));
key_thrust_release = keyboard_check_released(ord("W")) || keyboard_check_released(vk_up);

if ((key_thrust_held) &amp;&amp; (canPush) &amp;&amp; (!isMoving))
{
    boost += boosterPower;
    show_debug_message(boost);
}

if (key_thrust_release &amp;&amp; canPush &amp;&amp; (!isMoving))
{
    isMoving = true;
}


//Calculate Distances between homes
dist = distance_to_object(home);
dist2 = distance_to_object(home2);
dist3 = distance_to_object(home3);
dist4 = distance_to_object(home4);
if (dist &lt;= 100){
    volume = 1;
}else if (dist &lt;= 1000){
    volume = 0.7;
}else if (dist &lt;= 2000){
    volume = 0.4;
}else if (dist &lt;= 3000){
    volume = 0.1;
}else{
    volume = 0;
}
if (dist2 &lt;= 100){
    volume2 = 1;
}else if (dist2 &lt;= 1000){
    volume2 = 0.7;
}else if (dist2 &lt;= 2000){
    volume2 = 0.4;
}else if (dist2 &lt;= 3000){
    volume2 = 0.1;
}else{
    volume2 = 0;
}
if (dist3 &lt;= 100){
    volume3 = 1;
}else if (dist3 &lt;= 1000){
    volume3 = 0.7;
}else if (dist3 &lt;= 2000){
    volume3 = 0.4;
}else if (dist3 &lt;= 3000){
    volume3 = 0.1;
}else{
    volume3 = 0;
}
if (dist4 &lt;= 100){
    volume4 = 1;
}else if (dist4 &lt;= 1000){
    volume4 = 0.7;
}else if (dist4 &lt;= 2000){
    volume4 = 0.4;
}else if (dist4 &lt;= 3000){
    volume4 = 0.1;
}else{
    volume4 = 0;
}

//Check if moving
if (isMoving)
{
    motion_add(dir+90, boost/3);
    moves++;
    boost = 0;
    isMoving = false;
}
else
{
    speed = speed - slowSpeed;
}

//Rotation and Pulse Input
if (keyboard_check(vk_left) || (keyboard_check(ord('A'))))
{
    dir += 1 * turnSpeed;
}

if (keyboard_check(vk_right) || (keyboard_check(ord('D'))))
{
    dir -= 1 * turnSpeed;
}

image_angle = dir;

if (dir &gt; 360)
{
    dir = 0;
}
else if (dir &lt; 0)
{
    dir = 360;
}

if (speed &lt;= 1)
{
    canPush = true;
}
else
{
    canPush = false;
}
if (boost &gt; maxBoost)
{
    boost = maxBoost;
}
if (speed &lt; 0)
{
    speed = 0;
}

//Pulse
if (keyboard_check_pressed(vk_space) &amp;&amp; !isMoving)
{
    switch(shapeNum)
    {
        case 1:
            audio_sound_gain(sound,1,1);
            audio_play_sound(sound,30,false);
            alarm[3] = 20; alarm[1] = 40; alarm[0] = 60; alarm[2] = 80;
            break;
        case 2:
            audio_sound_gain(sound2,1,1);
            audio_play_sound(sound2,30,false);
            alarm[2] = 20; alarm[1] = 40; alarm[3] = 60; alarm[0] = 80;
            break;
        case 3:
            audio_sound_gain(sound3,1,1);
            audio_play_sound(sound3,30,false);
            alarm[1] = 20; alarm[3] = 40; alarm[2] = 60; alarm[0] = 80;
            break;
        case 4:
            audio_sound_gain(sound4,1,1);
            audio_play_sound(sound4,30,false);
            alarm[0] = 20; alarm[2] = 40; alarm[1] = 60; alarm[3] = 80;
            break;
    }
    instance_create(x,y,pulse);
    pulseX = x;
    pulseY = y;
    alarm[4] = 10;
}

//Debug Tool
if (keyboard_check_pressed(vk_enter))
{
    show_debug_message("Speed: " + string(speed));
    show_debug_message("Direction: " + string(dir));
    show_debug_message("Coordinates: (" + string(x) + ", " + string(y) + ")");
    show_debug_message("Shape Number: " + string(shapeNum));
    show_debug_message("Boost: " + string(boost));
    show_debug_message("Moves: " + string(moves));
    show_debug_message("Distance to Home: " + string(distance_to_object(home)));
    show_debug_message("Volumes: 1." + string(volume) + " 2." + string(volume2) + " 3." + string(volume3) + " 4." + string(volume4));
    show_debug_message("Animation Speed: " + string(image_speed));
    
}

//Fullscreen
if (keyboard_check_pressed(ord('F')))
{
    if (window_get_fullscreen())
    {
        window_set_fullscreen(false);
    }
    else
    {
        window_set_fullscreen(true);
    }
}

//Animations
if (!isMoving &amp;&amp; key_thrust_held)
{
    image_speed = 0;
    if (boost &gt;= maxBoost-1)
    {
        image_index = 9;
    }
    else if (boost &gt;= maxBoost-20)
    {
        image_index = 8;
    }
    else if (boost &gt;= maxBoost-40)
    {
        image_index = 7;
    }
    else if (boost &gt;= maxBoost-60)
    {
        image_index = 6;
    }
    else if (boost &gt;= maxBoost-80)
    {
        image_index = 5;
    }
    else if (boost &gt;= maxBoost-100)
    {
        image_index = 4;
    }
    else if (boost &gt;= maxBoost-120)
    {
        image_index = 3;
    }
    else if (boost &gt;= maxBoost-140)
    {
        image_index = 2;
    }
    else if (boost &gt;= maxBoost-160)
    {
        image_index = 1;
    }
    else
    {
        image_index = 0;
    }
}
else
{
    image_speed = 0.5;
}











if ((position_meeting( home.x, home.y, Player_shape1)) &amp;&amp; (sprite_index == spr_shape1) ) 
{
    if ((image_angle &gt;= 0) &amp;&amp; (image_angle &lt;= 15) || (image_angle &gt;= 345) &amp;&amp; (image_angle &lt;= 360)) //0 - facing up
    {
        x = home.x;
        y = home.y;
        
        show_debug_message("GAME END! Shape 1");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        //game_end();
        //win or next shape.
    }
    else if ((image_angle &gt;= 165) &amp;&amp; (image_angle &lt;= 195))//180 - facing down
    {
        x = home.x;
        y = home.y;
        
        show_debug_message("GAME END! Shape 1");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        //game_end();
        //win or next shape.
    }
    else if ((image_angle &gt;= 75) &amp;&amp; (image_angle &lt;= 105))//90 - facing left
    {
        x = home.x;
        y = home.y;
        
        show_debug_message("GAME END! Shape 1");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        //game_end();
        //win or next shape.
    }
    else if ((image_angle &gt;= 255) &amp;&amp; (image_angle &lt;= 285))//270 - facing right
    {
        x = home.x;
        y = home.y;
        
        show_debug_message("GAME END! Shape 1");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        //game_end();
        //win or next shape.
    }
}
else if ((position_meeting( home2.x, home2.y, Player_shape1)) &amp;&amp; sprite_index == spr_shape2 ) //0 - facing up
{
    if ((image_angle &gt;= 0) &amp;&amp; (image_angle &lt;= 15) || (image_angle &gt;= 345) &amp;&amp; (image_angle &lt;= 360))
    {
        x = home2.x;
        y = home2.y;
        
        show_debug_message("GAME END! Shape 2");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        
        //game_end();
        //win or next shape.
    }
    else if ((image_angle &gt;= 165) &amp;&amp; (image_angle &lt;= 195))//180 - facing down
    {
        x = home2.x;
        y = home2.y;
        
        show_debug_message("GAME END! Shape 2");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        //game_end();
        //win or next shape.
    }
}
else if ((position_meeting( home3.x, home3.y, Player_shape1)) &amp;&amp; sprite_index == spr_shape3 ) 
{
    if ((image_angle &gt;= 0) &amp;&amp; (image_angle &lt;= 15) || (image_angle &gt;= 345) &amp;&amp; (image_angle &lt;= 360))//0 - facing up
    {
        x = home3.x;
        y = home3.y;
        
        show_debug_message("GAME END! Shape 3");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        //game_end();
        //win or next shape.
    }
}
else if ((position_meeting( home4.x, home4.y, Player_shape1)) &amp;&amp; sprite_index == spr_shape4 ) //0 - facing up
{
    if ((image_angle &gt;= 0) &amp;&amp; (image_angle &lt;= 15) || (image_angle &gt;= 345) &amp;&amp; (image_angle &lt;= 360))
    {
        x = home4.x;
        y = home4.y;
        
        show_debug_message("GAME END! Shape 4");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        //game_end();
        //win or next shape.
    }
    else if ((image_angle &gt;= 165) &amp;&amp; (image_angle &lt;= 195))//180 - facing down
    {
        x = home4.x;
        y = home4.y;
        
        show_debug_message("GAME END! Shape 4");
        
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        //game_end();
        //win or next shape.
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ParentWall_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_bounce_solid(true);
audio_play_sound(fx_bounce, 70, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_master_gain(2);
randomize();
shapeNum = irandom_range(1,4);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>10</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
